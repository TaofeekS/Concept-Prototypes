[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = {
"fragment": "uniform float height = 1;

uniform texture displace_1;
uniform float speed_1 = 1;
uniform float displace_factor_1 = 0.01;

uniform texture displace_2;
uniform float speed_2 = 1;
uniform float displace_factor_2 = 0.01;

vec2 offset_1 = vec2(TIME * speed_1,0);
vec2 d_1 = tex(displace_1, UV + offset_1).rg;

vec2 offset_2 = vec2(TIME * speed_2,0);
vec2 d_2 = tex(displace_2, UV + offset_2).rg;

float persp = 1 - UV.y / 1.2;
vec2 r_uv = vec2( SCREEN_UV.x * persp + 0.5 - persp / 2.0, SCREEN_UV.y - 0.5*UV.y ) + (d_1 * displace_factor_1 - d_2 * displace_factor_2);

vec3 r_col = texscreen( r_uv );

COLOR.rgb = r_col + vec3(d_1 * d_2, 0) * 0.1 - vec3(0.4,0.2,0.1) * (1-UV.y + 0.1);
COLOR.rgb += vec3(0.3,0.2,0.1) * (1 - dot(d_1, d_2));
COLOR.a = 1.0;

//vec3 rbgnormal = tex( normal, r_uv ).rgb * vec3( 2.0, -2.0, 2.0 ) - vec3( 1.0, -1.0, 1.0 );
//NORMAL = rbgnormal;
",
"fragment_ofs": 0,
"light": "/*
vec3 light_3d = vec3( -LIGHT_VEC.x, LIGHT_VEC.y, -LIGHT_HEIGHT );
vec3 n = NORMAL;
//n.y = -n.y;

//compute diffuse light
float dp = max( dot( normalize( n ), -normalize( light_3d ) ), 0 );
LIGHT = vec4( vec3( dp ), 1.0 ) * COLOR * LIGHT_COLOR;
*/",
"light_ofs": 0,
"vertex": "VAR1.xy = SRC_VERTEX;",
"vertex_ofs": 0
}

